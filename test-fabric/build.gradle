plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    modImplementation fabricApi.module("fabric-api-base", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-convention-tags-v1", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-client-tags-api-v1", project.fabric_api_version)

    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    implementation (project(path: ":fabric", configuration: "namedElements"))
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    common(project(path: ":test-common", configuration: "namedElements")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand(project.properties)
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

